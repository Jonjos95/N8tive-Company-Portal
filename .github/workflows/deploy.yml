name: Deploy (HF + optional AWS)

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Validate HTML files
        run: |
          echo "‚úÖ Validating HTML structure..."
          find . -name "*.html" -not -path "./.git/*" -exec echo "Found: {}" \;
      
      - name: Check for required files
        run: |
          echo "üìÅ Validating project structure..."
          
          # Core files
          REQUIRED=(
            "index.html"
            "products.html"
            "pricing.html"
            "login.html"
            "style.css"
            "script.js"
            "auth.js"
          )
          
          MISSING=0
          for file in "${REQUIRED[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing: $file"
              MISSING=$((MISSING + 1))
            else
              echo "‚úÖ Found: $file"
            fi
          done
          
          # Components
          if [ ! -d "components" ]; then
            echo "‚ùå Missing: components/ directory"
            MISSING=$((MISSING + 1))
          else
            echo "‚úÖ Found: components/ directory"
            if [ ! -f "components/navbar.js" ]; then
              echo "‚ö†Ô∏è  Warning: components/navbar.js not found"
            fi
            if [ ! -f "components/footer.js" ]; then
              echo "‚ö†Ô∏è  Warning: components/footer.js not found"
            fi
          fi
          
          # Assets
          if [ ! -d "assets/images/tech-logos" ]; then
            echo "‚ö†Ô∏è  Warning: assets/images/tech-logos/ directory not found"
          else
            echo "‚úÖ Found: assets/images/tech-logos/ directory"
          fi
          
          if [ $MISSING -gt 0 ]; then
            echo "‚ùå $MISSING required file(s) missing!"
            exit 1
          fi
          
          echo "‚úÖ All required files present"
      
      - name: Deploy to Hugging Face Spaces
        run: |
          # Hugging Face Spaces auto-deploys from GitHub when connected
          # This workflow validates files are ready before deployment
          HF_USERNAME="${HF_USERNAME:-jjosephdev}"
          HF_SPACE="${HF_SPACE:-n8tive-nexus-portal}"
          
          echo "‚úÖ Push successful - Hugging Face will auto-deploy"
          echo "üîó Space URL: https://huggingface.co/spaces/$HF_USERNAME/$HF_SPACE"
          echo "‚ÑπÔ∏è  If Space is connected to this repo, it will update automatically"
      
      - name: Deployment Status
        run: |
          echo "‚úÖ All checks passed!"
          echo "üì¶ Your site is ready to be served"
          echo "üåê Hugging Face Spaces will automatically update"

  aws:
    name: Deploy to AWS (S3 + CloudFront)
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check AWS secrets present
        id: check
        run: |
          missing=0
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "‚ö†Ô∏è  Missing secret: AWS_ACCESS_KEY_ID"; missing=$((missing+1));
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "‚ö†Ô∏è  Missing secret: AWS_SECRET_ACCESS_KEY"; missing=$((missing+1));
          fi
          if [ -z "${{ secrets.S3_BUCKET_NAME }}" ]; then
            echo "‚ö†Ô∏è  Missing secret: S3_BUCKET_NAME"; missing=$((missing+1));
          fi
          if [ -z "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            echo "‚ö†Ô∏è  Missing secret: CLOUDFRONT_DISTRIBUTION_ID"; missing=$((missing+1));
          fi
          if [ $missing -gt 0 ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip if secrets missing
        if: steps.check.outputs.skip == 'true'
        run: |
          echo "‚ÑπÔ∏è  AWS secrets not fully configured. Skipping AWS deployment."
          exit 0

      - name: Configure AWS credentials
        if: steps.check.outputs.skip != 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Sync static assets to S3 (long cache)
        if: steps.check.outputs.skip != 'true'
        run: |
          aws s3 sync . s3://${{ secrets.S3_BUCKET_NAME }} \
            --exclude ".git/*" \
            --exclude "node_modules/*" \
            --exclude ".github/*" \
            --exclude "*.md" \
            --exclude ".DS_Store" \
            --exclude "deploy.sh" \
            --cache-control "public, max-age=31536000" \
            --delete \
            --exclude "*.html" \
            --exclude "*.json"

      - name: Upload HTML (short cache)
        if: steps.check.outputs.skip != 'true'
        run: |
          aws s3 sync . s3://${{ secrets.S3_BUCKET_NAME }} \
            --exclude "*" \
            --include "*.html" \
            --cache-control "public, max-age=3600" \
            --delete

      - name: Invalidate CloudFront cache
        if: steps.check.outputs.skip != 'true'
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: AWS Deployment Status
        if: steps.check.outputs.skip != 'true'
        run: |
          echo "‚úÖ Deployed to S3 bucket: ${{ secrets.S3_BUCKET_NAME }}"
          echo "üßä CloudFront distribution invalidated: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}"
          echo "üåê Your AWS site will reflect changes within a few minutes"

